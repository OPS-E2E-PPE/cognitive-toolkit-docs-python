### YamlMime:UniversalReference
api_name: []
items:
- children:
  - cntk.random.bernoulli
  - cntk.random.bernoulli_like
  - cntk.random.gumbel
  - cntk.random.gumbel_like
  - cntk.random.normal
  - cntk.random.normal_like
  - cntk.random.uniform
  - cntk.random.uniform_like
  fullName: cntk.random
  langs:
  - python
  module: cntk.random
  name: random
  source:
    id: random
    path: bindings/python/cntk\random\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\random\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 0
  summary: 'Functions that generate random numbers with respect to designated distributions.

    '
  type: package
  uid: cntk.random
- example:
  - "\n```\n\n>>> b = C.random.bernoulli((2,3), seed=98052)\n>>> b.eval(device=C.cpu())\
    \ # explicitly setting cpu because this is tested on multiple platforms; leave\
    \ it unspecified in your code\narray([[ 1.,  1.,  0.],\n       [ 1.,  0.,  0.]],\
    \ dtype=float32)\n```\n"
  fullName: cntk.random.bernoulli
  langs:
  - python
  module: cntk.random
  name: bernoulli
  source:
    id: bernoulli
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 105
  summary: 'Generates samples from the Bernoulli distribution with success probability
    *mean*.

    '
  syntax:
    content: bernoulli(shape, dtype=default_override_or(np.float32), mean=0.5, seed=auto_select,
      name='')
    parameters:
    - description: 'shape of the output (entries are independent random draws)

        '
      id: shape
      type:
      - tuple
    - description: 'data type. Default is np.float32.

        '
      id: dtype
      type:
      - np.float32
      - np.float64
      - np.float16
    - description: 'success probability

        '
      id: mean
      type:
      - float
    - description: 'pseudo random number generator seed (default: automatically select
        a unique seed)

        '
      id: seed
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.random.bernoulli
- example:
  - "\n```\n\n>>> p = C.placeholder()\n>>> bp = C.random.bernoulli_like(p, seed=98052)\n\
    >>> x = C.sequence.input_variable(1)\n>>> bx = bp.replace_placeholders({p:x})\n\
    >>> x0 = np.zeros((1,3,1), dtype=np.float32)\n>>> bx.eval({x:x0}, device=C.cpu())\
    \ # explicitly setting cpu because this is tested on multiple platforms; leave\
    \ it unspecified in your code\n[array([[ 1.],\n       [ 1.],\n       [ 0.]], dtype=float32)]\n\
    ```\n"
  fullName: cntk.random.bernoulli_like
  langs:
  - python
  module: cntk.random
  name: bernoulli_like
  source:
    id: bernoulli_like
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 229
  summary: 'Generates samples from the Bernoulli distribution with success probability
    *mean*.

    '
  syntax:
    content: bernoulli_like(x, mean=0.5, seed=auto_select, name='')
    parameters:
    - description: 'cntk variable (input, output, parameter, or constant) from which
        to copy the shape, data type, and dynamic axes.

        '
      id: x
    - description: 'success probability

        '
      id: mean
      type:
      - float
    - description: 'pseudo random number generator seed (default: automatically select
        a unique seed)

        '
      id: seed
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.random.bernoulli_like
- example:
  - "\n```\n\n>>> g = C.random.gumbel((2,3), seed=98052)\n>>> g.eval(device=C.cpu())\
    \ # explicitly setting cpu because this is tested on multiple platforms; leave\
    \ it unspecified in your code\narray([[-0.987713, -0.522298,  0.425918],\n   \
    \    [-1.019599,  5.435177,  1.586071]], dtype=float32)\n```\n"
  fullName: cntk.random.gumbel
  langs:
  - python
  module: cntk.random
  name: gumbel
  seealsoContent: "See also: [The Gumbel-Max Trick](https://hips.seas.harvard.edu/blog/2013/04/06/the-gumbel-max-trick-for-discrete-distributions/).\
    \ \n"
  source:
    id: gumbel
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 74
  summary: 'Generates samples from the Gumbel distribution with location *loc* and
    scale *scale*.

    '
  syntax:
    content: gumbel(shape, dtype=default_override_or(np.float32), loc=0.0, scale=1.0,
      seed=auto_select, name='')
    parameters:
    - description: 'shape of the output (entries are independent random draws)

        '
      id: shape
      type:
      - tuple
    - description: 'data type. Default is np.float32.

        '
      id: dtype
      type:
      - np.float32
      - np.float64
      - np.float16
    - description: 'location of the distribution

        '
      id: loc
      type:
      - float
    - description: 'scale of the distribution

        '
      id: scale
      type:
      - float
    - description: 'pseudo random number generator seed (default: automatically select
        a unique seed)

        '
      id: seed
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.random.gumbel
- example:
  - "\n```\n\n>>> x = C.constant(np.zeros((2,3,4), dtype=np.float32))\n>>> g = C.random.gumbel_like(x,\
    \ seed=98052)\n>>> s = g.eval(device=C.cpu()) # explicitly setting cpu because\
    \ this is tested on multiple platforms; leave it unspecified in your code\n>>>\
    \ np.round(s, 4)\narray([[[-0.9877, -0.5223,  0.4259, -1.0196],\n        [ 5.4352,\
    \  1.5861,  5.0608,  2.0668],\n        [-0.2135,  1.0139,  3.1217, -1.4834]],\n\
    <BLANKLINE>\n       [[ 0.4507,  0.6325,  2.1682,  0.4463],\n        [-0.6583,\
    \  0.1147, -0.3144, -0.7925],\n        [ 1.9773, -0.3627, -0.4566, -0.2368]]],\
    \ dtype=float32)\n```\n"
  fullName: cntk.random.gumbel_like
  langs:
  - python
  module: cntk.random
  name: gumbel_like
  seealsoContent: "See also: [The Gumbel-Max Trick](https://hips.seas.harvard.edu/blog/2013/04/06/the-gumbel-max-trick-for-discrete-distributions/).\
    \ \n"
  source:
    id: gumbel_like
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 192
  summary: 'Generates samples from the Gumbel distribution with location *loc* and
    scale *scale*.

    '
  syntax:
    content: gumbel_like(x, mean=0.0, scale=1.0, seed=auto_select, name='')
    parameters:
    - description: 'cntk variable (input, output, parameter, or constant) from which
        to copy the shape, data type, and dynamic axes.

        '
      id: x
    - description: 'location of the distribution

        '
      id: loc
      type:
      - float
    - description: 'scale of the distribution

        '
      id: scale
      type:
      - float
    - description: 'pseudo random number generator seed (default: automatically select
        a unique seed)

        '
      id: seed
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.random.gumbel_like
- example:
  - "\n```\n\n>>> z = C.random.normal((2,3), seed=98052)\n>>> z.eval(device=C.cpu())\
    \ # explicitly setting cpu because this is tested on multiple platforms; leave\
    \ it unspecified in your code\narray([[ 1.803254,  0.995395, -0.631974],\n   \
    \    [-1.736721,  0.005615, -0.340025]], dtype=float32)\n```\n"
  fullName: cntk.random.normal
  langs:
  - python
  module: cntk.random
  name: normal
  source:
    id: normal
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 47
  summary: 'Generates samples from the normal distribution with mean *mean* and standard
    deviation *scale*.

    '
  syntax:
    content: normal(shape, dtype=default_override_or(np.float32), mean=0.0, scale=1.0,
      seed=auto_select, name='')
    parameters:
    - description: 'shape of the output (entries are independent random draws)

        '
      id: shape
      type:
      - tuple
    - description: 'data type. Default is np.float32.

        '
      id: dtype
      type:
      - np.float32
      - np.float64
      - np.float16
    - description: 'mean of the distribution

        '
      id: mean
      type:
      - float
    - description: 'scale (standard deviation) of the distribution

        '
      id: scale
      type:
      - float
    - description: 'pseudo random number generator seed (default: automatically select
        a unique seed)

        '
      id: seed
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.random.normal
- example:
  - "\n```\n\n>>> x = C.parameter((2,3,4))\n>>> z = C.random.normal_like(x, seed=98052)\n\
    >>> z.eval(device=C.cpu()) # explicitly setting cpu because this is tested on\
    \ multiple platforms; leave it unspecified in your code\narray([[[ 1.803254, \
    \ 0.995395, -0.631974, -1.736721],\n        [ 0.005615, -0.340025, -0.011913,\
    \ -0.236371],\n        [-1.207685, -0.495846,  0.037022, -1.220596]],\n<BLANKLINE>\n\
    \       [[ 0.872981,  0.654405, -0.111421, -0.544074],\n        [ 1.543746, -0.63555\
    \ , -1.072869, -0.379701],\n        [ 0.592069, -1.035192,  1.679303, -0.391963]]],\
    \ dtype=float32)\n```\n"
  fullName: cntk.random.normal_like
  langs:
  - python
  module: cntk.random
  name: normal_like
  source:
    id: normal_like
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 160
  summary: 'Generates samples from the normal distribution with mean *mean* and standard
    deviation *scale*.

    '
  syntax:
    content: normal_like(x, mean=0.0, scale=1.0, seed=auto_select, name='')
    parameters:
    - description: 'cntk variable (input, output, parameter, or constant) from which
        to copy the shape, data type, and dynamic axes.

        '
      id: x
    - description: 'mean of the distribution

        '
      id: mean
      type:
      - float
    - description: 'scale (standard deviation) of the distribution

        '
      id: scale
      type:
      - float
    - description: 'pseudo random number generator seed (default: automatically select
        a unique seed)

        '
      id: seed
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.random.normal_like
- example:
  - "\n```\n\n>>> u = C.random.uniform((2,3), seed=98052)\n>>> u.eval(device=C.cpu())\
    \ # explicitly setting cpu because this is tested on multiple platforms; leave\
    \ it unspecified in your code\narray([[ 0.931785,  0.814722,  0.479606],\n   \
    \    [ 0.937468,  0.004351,  0.185131]], dtype=float32)\n```\n"
  fullName: cntk.random.uniform
  langs:
  - python
  module: cntk.random
  name: uniform
  source:
    id: uniform
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 19
  summary: 'Generates samples from the uniform distribution in the interval [*low*,`high`).

    '
  syntax:
    content: uniform(shape, dtype=default_override_or(np.float32), low=0.0, high=1.0,
      seed=auto_select, name='')
    parameters:
    - description: 'shape of the output (entries are independent random draws)

        '
      id: shape
      type:
      - tuple
    - description: 'data type. Default is np.float32.

        '
      id: dtype
      type:
      - np.float32
      - np.float64
      - np.float16
    - description: 'lower end of the range of the random numbers

        '
      id: low
      type:
      - float
    - description: 'upper end of the range of the random numbers

        '
      id: high
      type:
      - float
    - description: 'pseudo random number generator seed (default: automatically select
        a unique seed)

        '
      id: seed
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.random.uniform
- example:
  - "\n```\n\n>>> x = C.input_variable(4)\n>>> x0 = np.zeros((3,4), dtype=np.float32)\n\
    >>> u = C.random.uniform_like(x, seed=98052)\n>>> u.eval({x:x0}, device=C.cpu())\
    \ # explicitly setting cpu because this is tested on multiple platforms; leave\
    \ it unspecified in your code\narray([[ 0.931785,  0.814722,  0.479606,  0.937468],\n\
    \       [ 0.004351,  0.185131,  0.00632 ,  0.118901],\n       [ 0.710054,  0.304273,\
    \  0.043126,  0.987818]], dtype=float32)\n```\n"
  fullName: cntk.random.uniform_like
  langs:
  - python
  module: cntk.random
  name: uniform_like
  source:
    id: uniform_like
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 131
  summary: 'Generates samples from the uniform distribution in the interval [*low*,`high`).

    '
  syntax:
    content: uniform_like(x, low=0.0, high=1.0, seed=auto_select, name='')
    parameters:
    - description: 'cntk variable (input, output, parameter, or constant) from which
        to copy the shape, data type, and dynamic axes.

        '
      id: x
    - description: 'lower end of the range of the random numbers

        '
      id: low
      type:
      - float
    - description: 'upper end of the range of the random numbers

        '
      id: high
      type:
      - float
    - description: 'pseudo random number generator seed (default: automatically select
        a unique seed)

        '
      id: seed
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.random.uniform_like
references:
- fullName: cntk.random.bernoulli
  isExternal: false
  name: bernoulli
  parent: cntk.random
  uid: cntk.random.bernoulli
- fullName: cntk.random.bernoulli_like
  isExternal: false
  name: bernoulli_like
  parent: cntk.random
  uid: cntk.random.bernoulli_like
- fullName: cntk.random.gumbel
  isExternal: false
  name: gumbel
  parent: cntk.random
  uid: cntk.random.gumbel
- fullName: cntk.random.gumbel_like
  isExternal: false
  name: gumbel_like
  parent: cntk.random
  uid: cntk.random.gumbel_like
- fullName: cntk.random.normal
  isExternal: false
  name: normal
  parent: cntk.random
  uid: cntk.random.normal
- fullName: cntk.random.normal_like
  isExternal: false
  name: normal_like
  parent: cntk.random
  uid: cntk.random.normal_like
- fullName: cntk.random.uniform
  isExternal: false
  name: uniform
  parent: cntk.random
  uid: cntk.random.uniform
- fullName: cntk.random.uniform_like
  isExternal: false
  name: uniform_like
  parent: cntk.random
  uid: cntk.random.uniform_like
- fullName: str, optional
  name: str, optional
  spec.python:
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: optional
    name: optional
    uid: optional
  uid: str, optional
