### YamlMime:UniversalReference
api_name: []
items:
- children:
  - cntk.ops.sequence.broadcast_as
  - cntk.ops.sequence.delay
  - cntk.ops.sequence.first
  - cntk.ops.sequence.future_value
  - cntk.ops.sequence.gather
  - cntk.ops.sequence.input
  - cntk.ops.sequence.input_variable
  - cntk.ops.sequence.is_first
  - cntk.ops.sequence.is_last
  - cntk.ops.sequence.last
  - cntk.ops.sequence.past_value
  - cntk.ops.sequence.reduce_max
  - cntk.ops.sequence.reduce_sum
  - cntk.ops.sequence.scatter
  - cntk.ops.sequence.slice
  - cntk.ops.sequence.softmax
  - cntk.ops.sequence.unpack
  - cntk.ops.sequence.where
  fullName: cntk.ops.sequence
  langs:
  - python
  module: cntk.ops.sequence
  name: sequence
  source:
    id: sequence
    path: bindings/python/cntk\ops\sequence\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\ops\sequence\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 0
  summary: 'CNTK operators that are specialized in sequences.  Calling these operators
    creates nodes in the CNTK computational graph.

    '
  type: package
  uid: cntk.ops.sequence
- example:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> t = C.sequence.last(x)\n\
    >>> b = C.sequence.is_first(x)\n>>> y = C.sequence.broadcast_as(t, b)\n>>> # create\
    \ one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\n[array([[[ 18.,  19.],\n         [ 20.,  21.],\n         [\
    \ 22.,  23.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n         [ 20.,  21.],\n\
    \         [ 22.,  23.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n         [ 20.,\
    \  21.],\n         [ 22.,  23.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n     \
    \    [ 20.,  21.],\n         [ 22.,  23.]]], dtype=float32)]\n```\n"
  fullName: cntk.ops.sequence.broadcast_as
  langs:
  - python
  module: cntk.ops.sequence
  name: broadcast_as
  source:
    id: broadcast_as
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 560
  summary: 'Creates a sequence out of a non-sequence by endowing the `operand`

    with dynamic axes of the same type as the `broadcast_as_operand`

    and broadcasting the value of the `operand` along those dynamic axes.

    '
  syntax:
    content: broadcast_as(operand, broadcast_as_operand, name='')
    parameters:
    - description: 'the symbolic tensor whose value will be broadcast

        '
      id: operand
    - description: 'the symbolic tensor whose dynamic axes will

        be used to broadcast the operand

        '
      id: broadcast_as_operand
    - description: 'the name of the node in the network

        '
      id: name
      type:
      - str
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.broadcast_as
- fullName: cntk.ops.sequence.delay
  langs:
  - python
  module: cntk.ops.sequence
  name: delay
  source:
    id: delay
    path: bindings/python/cntk\ops\sequence\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\ops\sequence\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 260
  summary: 'This function combines @cntk.ops.sequence.past_value and @cntk.ops.sequence.future_value
    into a single function.

    This is useful when the time_step is computed and can be positive, negative, or
    0.

    '
  syntax:
    content: delay(x, initial_state=None, time_step=1, name='')
    parameters:
    - description: 'the tensor (or its name) from which the past value is obtained

        '
      id: x
    - defaultValue: None
      description: 'tensor or scalar representing the initial value to be used when
        the input tensor is shifted in time.

        '
      id: initial_state
    - defaultValue: '1'
      description: 'the number of time steps to look into the past, where negative
        values mean to look into the future, and 0 means a no-op (default 1).

        '
      id: time_step
      type:
      - int
    - defaultValue: ''
      description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
  type: function
  uid: cntk.ops.sequence.delay
- example:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> y = C.sequence.first(x)\n\
    >>> # create one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\narray([[[ 0.,  1.],\n         [ 2.,  3.],\n         [ 4.,\
    \  5.]]], dtype=float32)\n```\n"
  fullName: cntk.ops.sequence.first
  langs:
  - python
  module: cntk.ops.sequence
  name: first
  source:
    id: first
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 360
  summary: 'Returns the first element of its symbolic input sequence `seq`

    '
  syntax:
    content: first(seq, name='')
    parameters:
    - description: 'the symbolic tensor denoting a sequence

        '
      id: seq
    - description: 'the name of the node in the network

        '
      id: name
      type:
      - str
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.first
- example:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> # Create one sequence\
    \ with 4 tensors of shape (3, 2)\n>>> x0 = np.reshape(np.arange(24,dtype=np.float32),(1,4,3,2))\n\
    >>> y = C.sequence.future_value(x) # using initial state of 0 by default\n>>>\
    \ y.eval({x:x0})\n[array([[[  6.,   7.],\n         [  8.,   9.],\n         [ 10.,\
    \  11.]],\n<BLANKLINE>\n        [[ 12.,  13.],\n         [ 14.,  15.],\n     \
    \    [ 16.,  17.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n         [ 20.,  21.],\n\
    \         [ 22.,  23.]],\n<BLANKLINE>\n        [[  0.,   0.],\n         [  0.,\
    \   0.],\n         [  0.,   0.]]], dtype=float32)]\n```\n"
  fullName: cntk.ops.sequence.future_value
  langs:
  - python
  module: cntk.ops.sequence
  name: future_value
  source:
    id: future_value
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 102
  summary: 'This function returns the future value w.r.t. `x`. It is most often used
    when

    creating RNNs. The resulting tensor has the same shape as the input but is

    the next logical sample. The `time_step` parameter is the number of steps

    to look into the future and is 1 by default. If there is no future value (i.e.

    the current sample is the last one in the tensor) then the `initial_state`

    value is returned.


    The initial state can be a constant (scalar or tensor), a learnable tensor

    or input data (which has a batch dimension, as needed for sequence-to-sequence
    models).

    '
  syntax:
    content: future_value(x, initial_state=None, time_step=1, name='')
    parameters:
    - description: 'the tensor (or its name) from which the future value is obtained.

        '
      id: x
    - description: 'tensor or scalar representing the initial value to be used when
        the input tensor is shifted in time.

        '
      id: initial_state
    - description: 'the number of time steps to look into the future (default 1)

        '
      id: time_step
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.future_value
- example:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> z = C.greater(C.reduce_sum(x),60)\n\
    >>> y = C.sequence.gather(x,z)\n>>> # create one sequence of 4 tensors each with\
    \ shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\n[array([[[ 12.,  13.],\n         [ 14.,  15.],\n         [\
    \ 16.,  17.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n         [ 20.,  21.],\n\
    \         [ 22.,  23.]]], dtype=float32)]\n```\n"
  fullName: cntk.ops.sequence.gather
  langs:
  - python
  module: cntk.ops.sequence
  name: gather
  source:
    id: gather
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 457
  summary: 'Takes two sequences of the same length and returns a new sequence whose

    elements are those elements of sequence `seq` whose corresponding element

    in `condition` is True, preserving the ordering of `seq`.


    This operation is also known as stream compaction, or copy_if.

    '
  syntax:
    content: gather(seq, condition, new_sequence_axis_typeinfo=None, name='')
    parameters:
    - description: 'the symbolic sequence from which elements will be selected

        '
      id: seq
    - description: 'the symbolic sequence of booleans which indicate which

        elements should be selected

        '
      id: condition
    - description: 'tuple of integers indicating

        the scaling and additive factors for the length of the new sequence axis

        w.r.t. the operand sequence. This is used to determine the sequence axis

        to be used for the output of the gather operation. If this argument is left

        unspecified, a new independent sequence axis is created.

        '
      id: new_sequence_axis_typeinfo
    - description: 'the name of the node in the network

        '
      id: name
      type:
      - str
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.gather
- fullName: cntk.ops.sequence.input
  langs:
  - python
  module: cntk.ops.sequence
  name: input
  source:
    id: input
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 19
  summary: 'DEPRECATED.


    It creates an input in the network: a place where data,

    such as features and labels, should be provided.

    '
  syntax:
    content: input(shape, dtype=<cntk.default_options.default_override_or object>,
      needs_gradient=False, is_sparse=False, sequence_axis=Axis('defaultDynamicAxis'),
      name='')
    parameters:
    - description: 'the shape of the input tensor

        '
      id: shape
      type:
      - tuple
      - int
    - description: 'data type. Default is np.float32.

        '
      id: dtype
      type:
      - np.float32
      - np.float64
      - np.float16
    - description: 'whether to back-propagates to it or not. False by default.

        '
      id: needs_gradients
      type:
      - bool, optional
    - description: 'whether the variable is sparse (*False* by default)

        '
      id: is_sparse
      type:
      - bool, optional
    - description: 'a dynamic axis (e.g., default_dynamic_axis())

        '
      id: sequence_axis
      type:
      - cntk.axis.Axis
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.variables.Variable

        '
  type: function
  uid: cntk.ops.sequence.input
- fullName: cntk.ops.sequence.input_variable
  langs:
  - python
  module: cntk.ops.sequence
  name: input_variable
  source:
    id: input_variable
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 46
  summary: 'It creates an input in the network: a place where data,

    such as features and labels, should be provided.

    '
  syntax:
    content: input_variable(shape, dtype=np.float32, needs_gradient=False, is_sparse=False,
      sequence_axis=Axis.default_dynamic_axis(), name='')
    parameters:
    - description: 'the shape of the input tensor

        '
      id: shape
      type:
      - tuple
      - int
    - description: 'data type. Default is np.float32.

        '
      id: dtype
      type:
      - np.float32
      - np.float64
      - np.float16
    - description: 'whether to back-propagates to it or not. False by default.

        '
      id: needs_gradients
      type:
      - bool, optional
    - description: 'whether the variable is sparse (*False* by default)

        '
      id: is_sparse
      type:
      - bool, optional
    - description: 'a dynamic axis (e.g., default_dynamic_axis())

        '
      id: sequence_axis
      type:
      - cntk.axis.Axis
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.variables.Variable

        '
  type: function
  uid: cntk.ops.sequence.input_variable
- example:
  - '

    ```


    >>> x = C.sequence.input_variable(shape=(3,2))

    >>> y = C.sequence.is_first(x)

    >>> # create one sequence of 4 tensors each with shape (3,2)

    >>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))

    >>> y.eval({x:x0})

    [array([ 1.,  0.,  0.,  0.], dtype=float32)]

    ```

    '
  fullName: cntk.ops.sequence.is_first
  langs:
  - python
  module: cntk.ops.sequence
  name: is_first
  source:
    id: is_first
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 283
  summary: 'Returns a symbolic sequence of booleans with the same length as `seq`.
    The

    first element of the sequence is 1 and all others are 0.

    '
  syntax:
    content: is_first(seq, name='')
    parameters:
    - description: 'the symbolic tensor denoting a sequence

        '
      id: seq
    - description: 'the name of the node in the network

        '
      id: name
      type:
      - str
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.is_first
- example:
  - '

    ```


    >>> x = C.sequence.input_variable(shape=(3,2))

    >>> y = C.sequence.is_last(x)

    >>> # create one sequence of 4 tensors each with shape (3,2)

    >>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))

    >>> y.eval({x:x0})

    [array([ 0.,  0.,  0.,  1.], dtype=float32)]

    ```

    '
  fullName: cntk.ops.sequence.is_last
  langs:
  - python
  module: cntk.ops.sequence
  name: is_last
  source:
    id: is_last
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 309
  summary: 'Returns a symbolic sequence of booleans with the same length as `seq`.
    The

    last element of the sequence is 1 and all others are 0.

    '
  syntax:
    content: is_last(seq, name='')
    parameters:
    - description: 'the symbolic tensor denoting a sequence

        '
      id: seq
    - description: 'the name of the node in the network

        '
      id: name
      type:
      - str
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.is_last
- example:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> y = C.sequence.last(x)\n\
    >>> # create one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\narray([[[ 18.,  19.],\n         [ 20.,  21.],\n         [\
    \ 22.,  23.]]], dtype=float32)\n```\n"
  fullName: cntk.ops.sequence.last
  langs:
  - python
  module: cntk.ops.sequence
  name: last
  source:
    id: last
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 386
  summary: 'Returns the last element of its symbolic input sequence `seq`

    '
  syntax:
    content: last(seq, name='')
    parameters:
    - description: 'the symbolic tensor denoting a sequence

        '
      id: seq
    - description: 'the name of the node in the network

        '
      id: name
      type:
      - str
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.last
- example:
  - "\n```\n\n>>> # create example input: one sequence with 4 tensors of shape (3,\
    \ 2)\n>>> from cntk.layers.typing import Tensor, Sequence\n>>> x = C.sequence.input_variable((3,2))\n\
    >>> x0 = np.reshape(np.arange(24,dtype=np.float32),(1,4,3,2))\n>>> x0\narray([[[[\
    \  0.,   1.],\n         [  2.,   3.],\n         [  4.,   5.]],\n<BLANKLINE>\n\
    \        [[  6.,   7.],\n         [  8.,   9.],\n         [ 10.,  11.]],\n<BLANKLINE>\n\
    \        [[ 12.,  13.],\n         [ 14.,  15.],\n         [ 16.,  17.]],\n<BLANKLINE>\n\
    \        [[ 18.,  19.],\n         [ 20.,  21.],\n         [ 22.,  23.]]]], dtype=float32)\n\
    ```\n\n\n```\n\n>>> # this demonstrates how past_value shifts the sequence by\
    \ one, padding with initial_state\n>>> y = C.sequence.past_value(x) # initial_state\
    \ is 0 by default\n>>> y.eval({x:x0})\n[array([[[  0.,   0.],\n         [  0.,\
    \   0.],\n         [  0.,   0.]],\n<BLANKLINE>\n        [[  0.,   1.],\n     \
    \    [  2.,   3.],\n         [  4.,   5.]],\n<BLANKLINE>\n        [[  6.,   7.],\n\
    \         [  8.,   9.],\n         [ 10.,  11.]],\n<BLANKLINE>\n        [[ 12.,\
    \  13.],\n         [ 14.,  15.],\n         [ 16.,  17.]]], dtype=float32)]\n```\n\
    \n\n```\n\n>>> # here, we pass a the initial_state as input data (e.g. sequence-to-sequence)\n\
    >>> s = C.input_variable((3,2))  # not a sequence, e.g. a final encoder hidden\
    \ state\n>>> s0 = np.reshape(np.arange(6,dtype=np.float32)/2,(1,3,2))\n>>> s0\n\
    array([[[ 0. ,  0.5],\n        [ 1. ,  1.5],\n        [ 2. ,  2.5]]], dtype=float32)\n\
    >>> y = C.sequence.past_value(x, initial_state=s)\n>>> y.eval({x:x0, s:s0}) #\
    \ same as the previous example except for the first time step\n[array([[[  0.\
    \ ,   0.5],\n         [  1. ,   1.5],\n         [  2. ,   2.5]],\n<BLANKLINE>\n\
    \        [[  0. ,   1. ],\n         [  2. ,   3. ],\n         [  4. ,   5. ]],\n\
    <BLANKLINE>\n        [[  6. ,   7. ],\n         [  8. ,   9. ],\n         [ 10.\
    \ ,  11. ]],\n<BLANKLINE>\n        [[ 12. ,  13. ],\n         [ 14. ,  15. ],\n\
    \         [ 16. ,  17. ]]], dtype=float32)]\n```\n"
  fullName: cntk.ops.sequence.past_value
  langs:
  - python
  module: cntk.ops.sequence
  name: past_value
  source:
    id: past_value
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 159
  summary: 'This function returns the past value w.r.t. `x`. It is most often used
    when

    creating RNNs. The resulting tensor has the same shape as the input but is

    the previous logical sample. The `time_step` parameter is the number of steps

    to look into the past and is 1 by default. If there is no past value (i.e.

    the current sample is the first one in the tensor)  then the `initial_state`

    value is returned.


    The initial state can be a constant (scalar or tensor), a learnable tensor

    or input data (which has a batch dimension, as needed for sequence-to-sequence
    models).

    '
  syntax:
    content: past_value(x, initial_state=None, time_step=1, name='')
    parameters:
    - description: 'the tensor (or its name) from which the past value is obtained

        '
      id: x
    - description: 'tensor or scalar representing the initial value to be used when
        the input tensor is shifted in time.

        '
      id: initial_state
    - description: 'the number of time steps to look into the past (default 1)

        '
      id: time_step
      type:
      - int
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.past_value
- fullName: cntk.ops.sequence.reduce_max
  langs:
  - python
  module: cntk.ops.sequence
  name: reduce_max
  source:
    id: reduce_max
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 634
  summary: 'Computes the max of the input sequence''s elements across the sequence
    axis.

    '
  syntax:
    content: reduce_max(seq, name='')
    parameters:
    - description: 'sequence input tensor

        '
      id: seq
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.reduce_max
- example:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> # create one sequence\
    \ of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y = C.sequence.reduce_sum(x)\n>>> y.eval({x:x0})\narray([[[ 36.,  40.],\n\
    \         [ 44.,  48.],\n         [ 52.,  56.]]], dtype=float32)\n```\n"
  fullName: cntk.ops.sequence.reduce_sum
  langs:
  - python
  module: cntk.ops.sequence
  name: reduce_sum
  source:
    id: reduce_sum
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 607
  summary: 'Computes the sum of the input sequence''s elements across the sequence
    axis.

    '
  syntax:
    content: reduce_sum(seq, name='')
    parameters:
    - description: 'sequence input tensor

        '
      id: seq
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.reduce_sum
- example:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> t = C.sequence.last(x)\n\
    >>> b = C.sequence.is_first(x)\n>>> y = C.sequence.scatter(t, b)\n>>> # create\
    \ one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\n[array([[[ 18.,  19.],\n         [ 20.,  21.],\n         [\
    \ 22.,  23.]],\n<BLANKLINE>\n        [[  0.,   0.],\n         [  0.,   0.],\n\
    \         [  0.,   0.]],\n<BLANKLINE>\n        [[  0.,   0.],\n         [  0.,\
    \   0.],\n         [  0.,   0.]],\n<BLANKLINE>\n        [[  0.,   0.],\n     \
    \    [  0.,   0.],\n         [  0.,   0.]]], dtype=float32)]\n```\n"
  fullName: cntk.ops.sequence.scatter
  langs:
  - python
  module: cntk.ops.sequence
  name: scatter
  source:
    id: scatter
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 503
  summary: 'Performs the inverse of gather. The sequence `seq` must have as many

    elements as the number of True values in the sequence `condition`.

    It will return a sequence whose length is the same as the `condition`

    sequence with zeroes everywhere except for the locations where `condition`

    evaluates to True in which case it will copy the elements from `seq`

    preserving their order.

    '
  syntax:
    content: scatter(seq, condition, new_sequence_axis_typeinfo=None, name='')
    parameters:
    - description: 'the symbolic sequence from which elements will be copied in the

        output

        '
      id: seq
    - description: 'the symbolic sequence which denotes the locations where

        elements should be copied

        '
      id: condition
    - description: 'tuple of integers indicating

        the scaling and additive factors for the length of the new sequence axis

        w.r.t. the condition sequence. This is used to determine the sequence axis

        to be used for the output of the gather operation. If this argument is left

        unspecified a new independent sequence axis is created.

        '
      id: new_sequence_axis_typeinfo
    - description: 'the name of the node in the network

        '
      id: name
      type:
      - str
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.scatter
- fullName: cntk.ops.sequence.slice
  langs:
  - python
  module: cntk.ops.sequence
  name: slice
  seealsoContent: "See also: Indexing in NumPy: [https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html](https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html)\
    \ \n"
  source:
    id: slice
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 335
  summary: 'Slice the input sequence.



    '
  syntax:
    content: slice(seq, begin_index, end_index, name='')
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.slice
- fullName: cntk.ops.sequence.softmax
  langs:
  - python
  module: cntk.ops.sequence
  name: softmax
  source:
    id: softmax
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 651
  summary: 'Computes the softmax of the input across the sequence axis.

    '
  syntax:
    content: softmax(seq, name='')
    parameters:
    - description: 'sequence input tensor

        '
      id: seq
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.softmax
- fullName: cntk.ops.sequence.unpack
  langs:
  - python
  module: cntk.ops.sequence
  name: unpack
  source:
    id: unpack
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 73
  summary: 'This function unpacks the specified sequence operand ''x'' along the most

    significant static axis [-1] and pads any gaps with the specified ''padding_value''.

    If the ''no_mask_output'' argument is False, the returned Function has 2 outputs;

    viz. the unpacked non-sequence data and a mask denoting the gaps in the unpacked
    output

    due to differences across lengths of the sequences in the operand.



    '
  syntax:
    content: unpack(x, padding_value, no_mask_output=False, name='')
    parameters:
    - description: 'the sequence tensor (or its name) which is unpacked

        '
      id: x
    - description: 'The value to pad gaps in the unpacked tensor with.

        '
      id: padding_value
      type:
      - np.float32
      - np.float64
      - np.float16
    - description: 'whether the Function has a mask tensor output denoting the

        gaps in the unpacked output due to differences across lengths of the sequences
        in the operand.

        '
      id: no_mask_output
      type:
      - bool, optional
    - description: 'the name of the Function instance in the network

        '
      id: name
      type:
      - str, optional
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.unpack
- example:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> z = C.greater(C.reduce_sum(x),\
    \ 60)\n>>> # create one sequence of 4 tensors each with shape (3,2)\n>>> x0 =\
    \ np.reshape(np.arange(24.0, dtype=np.float32), (1,4,3,2))\n>>> z.eval({x:x0})\n\
    [array([ 0.,  0.,  1.,  1.], dtype=float32)]\n>>> y = C.sequence.where(z)\n>>>\
    \ y.eval({x:x0})\n[array([ 2.,  3.], dtype=float32)]\n```\n\n\n```\n\n>>> # repeat\
    \ frame[1] twice, frame[3] three times, and frame[4] twice\n>>> C.sequence.where(C.sequence.input_variable(1)).eval([[[1],\
    \ [2], [1], [3], [2]]])\n[array([ 0.,  1.,  1.,  2.,  3.,  3.,  3.,  4.,  4.],\
    \ dtype=float32)]\n>>> # note that the above are the indices that are passed to\n\
    ```\n\n\n```\n\n>>> # repeat frames with a fractional factor\n>>> C.sequence.where(C.sequence.input_variable(1)).eval([[[1.2]]*10])\n\
    [array([ 0.,  0.,  1.,  2.,  3.,  4.,  5.,  5.,  6.,  7.,  8.,  9.],\n    dtype=float32)]\n\
    >>> # as a result, a 1.2 times stretch is realized by duplicating frame[0] and\
    \ frame[5]\n```\n"
  fullName: cntk.ops.sequence.where
  langs:
  - python
  module: cntk.ops.sequence
  name: where
  source:
    id: where
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 413
  summary: 'Given a symbolic sequence `condition` of boolean-like (1/0) values, it
    will return

    a new sequence containing the indices for which the values were true.


    If `condition` has a value other than 0 or 1, it will denote a repeat factor.

    If a repeat factor is fractional, it will round up but deduct the overshoot from
    the

    next repeat factor.

    '
  syntax:
    content: where(condition, name='')
    parameters:
    - description: 'sequence of 0 or 1 values for filtering, or other positive values
        for repetition (also fractional)

        '
      id: condition
    - description: 'the name of the node in the network

        '
      id: name
      type:
      - str
    return:
      description: '@cntk.ops.functions.Function

        '
  type: function
  uid: cntk.ops.sequence.where
references:
- fullName: cntk.ops.sequence.broadcast_as
  isExternal: false
  name: broadcast_as
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.broadcast_as
- fullName: cntk.ops.sequence.delay
  isExternal: false
  name: delay
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.delay
- fullName: cntk.ops.sequence.first
  isExternal: false
  name: first
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.first
- fullName: cntk.ops.sequence.future_value
  isExternal: false
  name: future_value
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.future_value
- fullName: cntk.ops.sequence.gather
  isExternal: false
  name: gather
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.gather
- fullName: cntk.ops.sequence.input
  isExternal: false
  name: input
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.input
- fullName: cntk.ops.sequence.input_variable
  isExternal: false
  name: input_variable
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.input_variable
- fullName: cntk.ops.sequence.is_first
  isExternal: false
  name: is_first
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.is_first
- fullName: cntk.ops.sequence.is_last
  isExternal: false
  name: is_last
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.is_last
- fullName: cntk.ops.sequence.last
  isExternal: false
  name: last
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.last
- fullName: cntk.ops.sequence.past_value
  isExternal: false
  name: past_value
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.past_value
- fullName: cntk.ops.sequence.reduce_max
  isExternal: false
  name: reduce_max
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.reduce_max
- fullName: cntk.ops.sequence.reduce_sum
  isExternal: false
  name: reduce_sum
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.reduce_sum
- fullName: cntk.ops.sequence.scatter
  isExternal: false
  name: scatter
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.scatter
- fullName: cntk.ops.sequence.slice
  isExternal: false
  name: slice
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.slice
- fullName: cntk.ops.sequence.softmax
  isExternal: false
  name: softmax
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.softmax
- fullName: cntk.ops.sequence.unpack
  isExternal: false
  name: unpack
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.unpack
- fullName: cntk.ops.sequence.where
  isExternal: false
  name: where
  parent: cntk.ops.sequence
  uid: cntk.ops.sequence.where
- fullName: str, optional
  name: str, optional
  spec.python:
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: optional
    name: optional
    uid: optional
  uid: str, optional
- fullName: bool, optional
  name: bool, optional
  spec.python:
  - fullName: bool
    name: bool
    uid: bool
  - fullName: ', '
    name: ', '
  - fullName: optional
    name: optional
    uid: optional
  uid: bool, optional
