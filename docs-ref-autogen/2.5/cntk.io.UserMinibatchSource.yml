### YamlMime:UniversalReference
api_name: []
items:
- children:
  - cntk.io.UserMinibatchSource.get_checkpoint_state
  - cntk.io.UserMinibatchSource.is_infinite
  - cntk.io.UserMinibatchSource.next_minibatch
  - cntk.io.UserMinibatchSource.restore_from_checkpoint
  - cntk.io.UserMinibatchSource.stream_info
  - cntk.io.UserMinibatchSource.stream_infos
  class: cntk.io.UserMinibatchSource
  fullName: cntk.io.UserMinibatchSource
  langs:
  - python
  module: cntk.io
  name: UserMinibatchSource
  source:
    id: UserMinibatchSource
    path: bindings/python/cntk\io\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 411
  summary: 'Base class of all user minibatch sources.







    '
  syntax:
    content: UserMinibatchSource()
  type: class
  uid: cntk.io.UserMinibatchSource
- class: cntk.io.UserMinibatchSource
  fullName: cntk.io.UserMinibatchSource.get_checkpoint_state
  langs:
  - python
  module: cntk.io
  name: get_checkpoint_state
  source:
    id: get_checkpoint_state
    path: bindings/python/cntk\io\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 480
  summary: 'Returns a dictionary describing the current state of the minibatch

    source. Needs to be overwritten if the state of the minibatch source

    needs to be stored to and later restored from the checkpoint.

    '
  syntax:
    content: get_checkpoint_state()
    parameters:
    - id: self
    return:
      description: 'dictionary, that can be later used on @cntk.io.UserMinibatchSource.restore_from_checkpoint.

        '
  type: method
  uid: cntk.io.UserMinibatchSource.get_checkpoint_state
- class: cntk.io.UserMinibatchSource
  fullName: cntk.io.UserMinibatchSource.is_infinite
  langs:
  - python
  module: cntk.io
  name: is_infinite
  source:
    id: is_infinite
    path: bindings/python/cntk\io\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 514
  summary: 'Should return true if the user has not specified any limit on the number
    of sweeps and samples.

    '
  syntax:
    content: is_infinite()
    parameters:
    - id: self
  type: method
  uid: cntk.io.UserMinibatchSource.is_infinite
- class: cntk.io.UserMinibatchSource
  fullName: cntk.io.UserMinibatchSource.next_minibatch
  langs:
  - python
  module: cntk.io
  name: next_minibatch
  source:
    id: next_minibatch
    path: bindings/python/cntk\io\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 443
  summary: 'Function to be implemented by the user.

    '
  syntax:
    content: next_minibatch(num_samples, number_of_workers, worker_rank, device=None)
    parameters:
    - description: 'number of samples to return

        '
      id: num_samples
      type:
      - int
    - description: 'number of workers in total

        '
      id: number_of_workers
      type:
      - int
    - description: 'worker for which the data is to be returned

        '
      id: worker_rank
      type:
      - int
    - defaultValue: None
      description: 'the device

        descriptor that contains the type and id of the device on which the

        computation is performed. If *None*, the default device is used.

        '
      id: device
      type:
      - DeviceDescriptor, defaults to None
    return:
      description: 'mapping of @cntk.io.StreamInformation to @cntk.io.MinibatchData

        '
  type: method
  uid: cntk.io.UserMinibatchSource.next_minibatch
- class: cntk.io.UserMinibatchSource
  fullName: cntk.io.UserMinibatchSource.restore_from_checkpoint
  langs:
  - python
  module: cntk.io
  name: restore_from_checkpoint
  source:
    id: restore_from_checkpoint
    path: bindings/python/cntk\io\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 491
  summary: 'Sets the state of the checkpoint.

    '
  syntax:
    content: restore_from_checkpoint(state)
    parameters:
    - description: 'dictionary containing the state

        '
      id: state
      type:
      - dict
  type: method
  uid: cntk.io.UserMinibatchSource.restore_from_checkpoint
- class: cntk.io.UserMinibatchSource
  fullName: cntk.io.UserMinibatchSource.stream_info
  langs:
  - python
  module: cntk.io
  name: stream_info
  source:
    id: stream_info
    path: bindings/python/cntk\io\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 435
  summary: 'Gets the description of the stream with given name.

    Throws an exception if there are none or multiple streams with this

    same name.

    '
  syntax:
    content: stream_info(name)
    parameters:
    - id: self
    - id: name
  type: method
  uid: cntk.io.UserMinibatchSource.stream_info
- class: cntk.io.UserMinibatchSource
  fullName: cntk.io.UserMinibatchSource.stream_infos
  langs:
  - python
  module: cntk.io
  name: stream_infos
  source:
    id: stream_infos
    path: bindings/python/cntk\io\__init__.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 421
  summary: 'Function to be implemented by the user.

    '
  syntax:
    content: stream_infos()
    parameters:
    - id: self
    return:
      description: 'list of @cntk.io.StreamInformation instances

        '
  type: method
  uid: cntk.io.UserMinibatchSource.stream_infos
references:
- fullName: cntk.io.UserMinibatchSource.get_checkpoint_state
  isExternal: false
  name: get_checkpoint_state
  parent: cntk.io.UserMinibatchSource
  uid: cntk.io.UserMinibatchSource.get_checkpoint_state
- fullName: cntk.io.UserMinibatchSource.is_infinite
  isExternal: false
  name: is_infinite
  parent: cntk.io.UserMinibatchSource
  uid: cntk.io.UserMinibatchSource.is_infinite
- fullName: cntk.io.UserMinibatchSource.next_minibatch
  isExternal: false
  name: next_minibatch
  parent: cntk.io.UserMinibatchSource
  uid: cntk.io.UserMinibatchSource.next_minibatch
- fullName: cntk.io.UserMinibatchSource.restore_from_checkpoint
  isExternal: false
  name: restore_from_checkpoint
  parent: cntk.io.UserMinibatchSource
  uid: cntk.io.UserMinibatchSource.restore_from_checkpoint
- fullName: cntk.io.UserMinibatchSource.stream_info
  isExternal: false
  name: stream_info
  parent: cntk.io.UserMinibatchSource
  uid: cntk.io.UserMinibatchSource.stream_info
- fullName: cntk.io.UserMinibatchSource.stream_infos
  isExternal: false
  name: stream_infos
  parent: cntk.io.UserMinibatchSource
  uid: cntk.io.UserMinibatchSource.stream_infos
- fullName: DeviceDescriptor, defaults to None
  name: DeviceDescriptor, defaults to None
  spec.python:
  - fullName: DeviceDescriptor
    name: DeviceDescriptor
    uid: DeviceDescriptor
  - fullName: ', '
    name: ', '
  - fullName: defaults to None
    name: defaults to None
    uid: defaults to None
  uid: DeviceDescriptor, defaults to None
