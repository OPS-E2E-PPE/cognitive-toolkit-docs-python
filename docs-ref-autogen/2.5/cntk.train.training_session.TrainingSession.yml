### YamlMime:UniversalReference
api_name: []
items:
- children:
  - cntk.train.training_session.TrainingSession.on_cross_validation_end
  - cntk.train.training_session.TrainingSession.train
  class: cntk.train.training_session.TrainingSession
  fullName: cntk.train.training_session.TrainingSession
  langs:
  - python
  module: cntk.train.training_session
  name: TrainingSession
  source:
    id: TrainingSession
    path: bindings/python/cntk\train\training_session.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\train\training_session.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 223
  summary: 'The instance of the class should be created by using @cntk.train.training_session.training_session
    function.


    A training session trains a model using the specified `trainer` and configs.

    Different aspects of training such as data sources, checkpointing, cross validation,
    progress printing

    can be configured using the corresponding config classes.



    '
  syntax:
    content: TrainingSession(trainer, mb_source, mb_size, model_inputs_to_streams,
      max_samples, progress_frequency, checkpoint_config, cv_config, test_config)
    parameters:
    - description: 'trainer

        '
      id: trainer
      type:
      - cntk.train.trainer.Trainer
    - description: 'minibatch source used for training

        '
      id: mb_source
      type:
      - cntk.io.MinibatchSource
    - description: 'minibatch size schedule for training

        '
      id: mb_size
      type:
      - cntk.cntk_py.minibatch_size_schedule
      - int
    - description: 'mapping between input variables and input streams

        '
      id: model_inputs_to_streams
      type:
      - dict
    - description: 'maximum number of samples used for training

        '
      id: max_samples
      type:
      - int
    - description: 'the number of samples, minibatches, sweeps of epochs per which
        aggregated progress is printed

        If a tuple of (*frequency*, @cntk.train.training_session.DataUnit), the *frequency*
        is in terms of either *DataUnit.sample*, *DataUnit.minibatch* or *DataUnit.sweep*.

        See @cntk.train.training_session.DataUnit for more information on frequency
        data unit.

        '
      id: progress_frequency
      type:
      - int, tuple
    - description: 'checkpoint configuration

        '
      id: checkpoint_config
      type:
      - cntk.train.training_session.CheckpointConfig
    - description: 'cross validation configuration

        '
      id: cv_config
      type:
      - cntk.train.training_session.CrossValidationConfig
    - description: 'test configuration

        '
      id: test_config
      type:
      - cntk.train.training_session.TestConfig
  type: class
  uid: cntk.train.training_session.TrainingSession
- class: cntk.train.training_session.TrainingSession
  fullName: cntk.train.training_session.TrainingSession.on_cross_validation_end
  langs:
  - python
  module: cntk.train.training_session
  name: on_cross_validation_end
  source:
    id: on_cross_validation_end
    path: bindings/python/cntk\train\training_session.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\train\training_session.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 335
  summary: 'Callback that gets executed at the end of cross validation.

    '
  syntax:
    content: on_cross_validation_end(index, average_error, num_samples, num_minibatches)
    parameters:
    - description: 'index of the current callback.

        '
      id: index
      type:
      - int
    - description: 'average error for the cross validation

        '
      id: average_error
      type:
      - float
    - description: 'number of samples in cross validation

        '
      id: num_samples
      type:
      - int
    - description: 'number of minibatch in cross validation

        '
      id: num_minibatches
      type:
      - int
    return:
      description: 'True if training should continue, False otherwise.

        '
  type: method
  uid: cntk.train.training_session.TrainingSession.on_cross_validation_end
- class: cntk.train.training_session.TrainingSession
  fullName: cntk.train.training_session.TrainingSession.train
  langs:
  - python
  module: cntk.train.training_session
  name: train
  source:
    id: train
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.5
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 320
  summary: 'Perform training on a specified device.

    '
  syntax:
    content: train(device=None)
    parameters:
    - description: 'the device descriptor containing

        the type and id of the device where training takes place.

        '
      id: device
      type:
      - cntk.device.DeviceDescriptor
  type: method
  uid: cntk.train.training_session.TrainingSession.train
references:
- fullName: cntk.train.training_session.TrainingSession.on_cross_validation_end
  isExternal: false
  name: on_cross_validation_end
  parent: cntk.train.training_session.TrainingSession
  uid: cntk.train.training_session.TrainingSession.on_cross_validation_end
- fullName: cntk.train.training_session.TrainingSession.train
  isExternal: false
  name: train
  parent: cntk.train.training_session.TrainingSession
  uid: cntk.train.training_session.TrainingSession.train
- fullName: int, tuple
  name: int, tuple
  spec.python:
  - fullName: int
    name: int
    uid: int
  - fullName: ', '
    name: ', '
  - fullName: tuple
    name: tuple
    uid: tuple
  uid: int, tuple
